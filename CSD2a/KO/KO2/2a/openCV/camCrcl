import cv2
import mediapipe as mp
import math

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
mp_drawing = mp.solutions.drawing_utils

# Initialize the webcam
cap = cv2.VideoCapture(0)

# Define the scaling factor (2x)
scale_factor = 2

while True:
    # Capture a key press event
    key = cv2.waitKey(1) & 0xFF

    # Exit the loop if 'q' is pressed
    if key == ord('q'):
        break

    ret, webcam_frame = cap.read()

    # Resize the frame to increase resolution
    webcam_frame = cv2.resize(webcam_frame, None, fx=scale_factor, fy=scale_factor)

    # Convert the frame to RGB (MediaPipe requires RGB input)
    rgb_frame = cv2.cvtColor(webcam_frame, cv2.COLOR_BGR2RGB)

    # Process the frame with MediaPipe Hands
    results = hands.process(rgb_frame)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Draw landmarks on the frame
            mp_drawing.draw_landmarks(webcam_frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Calculate the center of the palm
            palm_landmarks = hand_landmarks.landmark
            palm_center = (
                int(palm_landmarks[mp_hands.HandLandmark.WRIST].x * webcam_frame.shape[1]),
                int(palm_landmarks[mp_hands.HandLandmark.WRIST].y * webcam_frame.shape[0])
            )

            # Calculate and display the distance between each fingertip and the palm center
            for fingertip_landmark in [mp_hands.HandLandmark.THUMB_TIP,
                                       mp_hands.HandLandmark.INDEX_FINGER_TIP,
                                       mp_hands.HandLandmark.MIDDLE_FINGER_TIP,
                                       mp_hands.HandLandmark.RING_FINGER_TIP,
                                       mp_hands.HandLandmark.PINKY_TIP]:
                fingertip_x = int(palm_landmarks[fingertip_landmark].x * webcam_frame.shape[1])
                fingertip_y = int(palm_landmarks[fingertip_landmark].y * webcam_frame.shape[0])
                
                # Calculate the Euclidean distance
                distance = math.sqrt((fingertip_x - palm_center[0])**2 + (fingertip_y - palm_center[1])**2)

                # Display the distance on the frame
                cv2.putText(webcam_frame, f"Distance: {distance:.2f}", (fingertip_x, fingertip_y - 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the frame with detected landmarks and distances
    cv2.imshow('Fingertip Distance from Palm Center', webcam_frame)

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()
